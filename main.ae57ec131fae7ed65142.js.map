{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","loggerNew","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","logSuccess","id","amount","logError","warn","catch"],"mappings":"wJAIMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,EAAQF,KACPA,OAIDK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAIjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAAAC,GAIjBA,EAHqBY,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK7DC,EAAY,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAEhDN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAMnC,IAIMG,EAAkB,SAAAC,GACtB,OAAO,IAAIrB,SAAQ,SAACC,EAASC,GAC3B,IAN+BoB,EAAKC,EAM9BzB,GANyBwB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDnB,YAAW,WACUqB,KAAKE,SAAW,GAGjCzB,EAAQoB,GAERnB,EAAOmB,KAERvB,OAID6B,EAAa,SAAAN,GACjBf,QAAQC,IAAR,eACiBc,EAAYO,GAD7B,iBACgDP,EAAYQ,OAD5D,OAKIC,EAAW,SAAAT,GACff,QAAQyB,KAAR,gCACkCV,EAAYO,GAD9C,8BAKFR,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,MAAOrB,KAAKmB,GAAYK,MAAMF,GAEhEV,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,MAAOrB,KAAKmB,GAAYK,MAAMF,GAEhEV,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,KAAMrB,KAAKmB,GAAYK,MAAMF,GAE/DV,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,MAAOrB,KAAKmB,GAAYK,MAAMF,K","file":"main.ae57ec131fae7ed65142.js","sourcesContent":["// Task 1\r\n\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n// Task 2\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\nconst loggerNew = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(loggerNew);\r\ntoggleUserState(users, 'Lux').then(loggerNew);\r\n\r\n\r\n// Task 3\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve(transaction);\r\n      } else {\r\n        reject(transaction);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = transaction => {\r\n  console.log(\r\n    `Transaction ${transaction.id} processed in ${transaction.amount}ms`,\r\n  );\r\n};\r\n\r\nconst logError = transaction => {\r\n  console.warn(\r\n    `Error processing transaction ${transaction.id}. Please try again later.`,\r\n  );\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}